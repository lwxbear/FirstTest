# -*- encoding=utf8 -*-
__author__ = "lwx"

from airtest.core.api import *
import decimal

auto_setup(__file__)

from poco.drivers.android.uiautomation import AndroidUiautomationPoco

poco = AndroidUiautomationPoco(use_airtest_input=True, screenshot_each_action=False)

sub_price = decimal.Decimal(20)

write_file = open('/Users/lwx/Desktop/price1.txt', 'a')

f = open('/Users/lwx/Desktop/num1.txt', 'r')
for line in f.readlines():
    tmp = line.split('-', 1)
    line_num = int(tmp[0].strip())
    sku_num = tmp[1].strip().strip('\n')
    print(line_num, sku_num)
    try:
        poco('com.shizhuang.duapp:id/etSearch').click()
        text(sku_num, search=True)
        poco("android.widget.FrameLayout").child("android.widget.LinearLayout").offspring(
            "android.view.ViewGroup").offspring("com.shizhuang.duapp:id/recyclerView").child(
            "com.shizhuang.duapp:id/search_root")[0].click()
        sellBottom = poco("android.widget.FrameLayout").child("android.widget.LinearLayout").offspring(
            "com.shizhuang.duapp:id/bottomButtonViews").offspring("com.shizhuang.duapp:id/btnGroup").offspring(
            "com.shizhuang.duapp:id/bottomSellOrAskPriceView")
        sellBottom.click()
        btnSure = poco('com.shizhuang.duapp:id/btnSure')
        if btnSure.exists():
            btnSure.click()
        current_sku_num = poco('com.shizhuang.duapp:id/tvSubTitle').get_text()
        if sku_num == current_sku_num:
            skuViewGroups = poco("com.shizhuang.duapp:id/skusView").child(
                "com.shizhuang.duapp:id/rvSpecification").child(
                "com.shizhuang.duapp:id/root_view")
            sku_list = []
            min_price = decimal.Decimal(1e+10)  # 默认最小值10^10
            for sku in skuViewGroups:
                tvTitle = sku.child('com.shizhuang.duapp:id/tvTitle')
                tvPrice = sku.child('com.shizhuang.duapp:id/tvPrice')
                if tvTitle.exists() and tvPrice.exists():
                    title = tvTitle.get_text()
                    price = tvPrice.get_text().replace('\xa5', '')
                    if price.find('--') == -1:  # 有价
                        sku.click()
                        poco('com.shizhuang.duapp:id/etInput').click()
                        text(price)
                        tvRealMoney = poco('com.shizhuang.duapp:id/groupPrice').offspring(
                            'com.shizhuang.duapp:id/tvRealMoney')
                        total = decimal.Decimal(price)
                        min_price = min_price.min(total)
                        for moneyTextView in tvRealMoney:
                            money = moneyTextView.get_text().replace('\xa5', '')
                            if money.find('-') == 0:
                                total += decimal.Decimal(money)
                        sku_list.append([title, price, str(total)])
                        poco('转到上一层级').click()
                        sellBottom.click()
                        if btnSure.exists():
                            btnSure.click()
                    else:  # 无价
                        sku_list.append([title, '--', '--'])

            if min_price == decimal.Decimal(1e+10):  # 处理无价
                print(f'该货号全部无价：{sku_num}')
                continue

            for sku_price in sku_list:  # 处理无价
                if sku_price[1] == '--' and sku_price[2] == '--':
                    sku_price[1] = str(min_price)
                    sku_price[2] = str(min_price - sub_price)
            for sku_price in sku_list:
                line = f'{line_num},{sku_num},{sku_price[0]},{sku_price[1]},{sku_price[2]}\n'
                write_file.writelines(line)
                write_file.flush()

            print(sku_list)
            # 返回起始搜索
            poco("android.widget.FrameLayout").child("android.widget.LinearLayout").offspring(
                "android.widget.FrameLayout").child("android.widget.LinearLayout").offspring(
                "com.shizhuang.duapp:id/tvCloseDialog").click()
            poco('com.shizhuang.duapp:id/homeAsUpBtn').click()
            poco('com.shizhuang.duapp:id/back').click()
        else:
            print(f'货号不匹配：{sku_num}!={current_sku_num}')
            exit()
    except:
        print(f'异常:{sku_num}')
        exit()
        
       
 1-122135585-4
2-122215580R-4
3-922235537-3
4-122235582-4
5-922225520-6
6-122215586-2
7-922215535-2
8-122225583-5
9-122225585-1
10-122225539R-1
11-122245580S-2
12-922235588-5
13-922215535-3
14-122225541-7
15-122145556S-5
16-922225521-4
17-122225520-4
18-922235588-1
19-122135537R-6
20-922035505-5
21-122225583-6
22-922215540-1
23-122235565-5
24-122225541-9
25-122225571-4
26-922235520-3
27-122235570S-2
28-922215540-3
29-922225535-1
30-922235588-3
31-922248856-3
32-122215520-4
33-122225541-5
34-122225520-3
35-122215555-5
36-922125527-2
37-922035533-3
38-122235582-6
39-122215550R-2
40-922115574-3
41-122235582-3
42-922128082-4
43-122225541-9
44-122225585-2
45-922125523-2
46-922235520-2
47-122225541-5
48-922035505-1
49-122125585-1
50-922145501-1
51-922145573-8
52-122215550R-1
53-122125570-1
54-922235588-1
55-122135590-3
56-922135541-5
57-122125570-3
58-922235529-1
59-122135510A-3
60-922135518-1
61-922145564-1
62-122245580S-2
63-122225541-7
64-122215550R-2
65-122028882-2
66-922245522-1
67-122215586-3
68-922145575-4
69-122048808-1
70-922248856-1
71-122235570S-2
72-922235588-5
73-122215520-8
74-122135537R-6
75-122135585-2
76-122218885-4
77-922145564-2
78-92625512-23
79-122235582-6
80-922045537-2
81-122115520-1
82-122225586S-4
83-122225571-1
84-122235540S-3
85-922145575-6
86-122015590-3
87-122215590R-1
88-122215552-2
89-122145523-10
90-122225570-4
91-122145556S-5
92-122235582-7
93-122215520-1
94-922225535-1
95-122215570R-1
96-122235570S-1
97-922025565-3
98-922225535-5
99-122225590R-3
100-122225541-1
101-122035501-12
102-122035589-4
103-92835525-3
104-922035505-5
105-122215520-5
106-122225541-6
107-122225570-4
108-122235565-4
109-922248856-1
110-922245522-4
111-922135518-4
112-122215552-2
113-122235565-1
114-922235527-4
115-122245575-8
116-122125585-2
117-122145502-5
118-122215555-4
119-122135537R-6
120-122035501-4
121-122225522-4
122-922245510-2
123-122247715-3
124-922045533-4
125-922025565-3
126-922145501-3
127-122235582-7
128-122025540-5
129-122245580S-1
130-12945582-2
131-122148851-2
132-122215555-5
133-922045537-2
134-122215566-3
135-122235571-7
136-122025520-6
137-122145523-7
138-922035505-7
139-122235570S-1
140-122225522-5
141-122148980-2
142-122025565-3
143-122125540-7
144-922235537-5
145-122125540-2
146-122015590-3
147-122235565-5
148-122215561R-2
149-122135571-2
150-122145571-9
151-122035589-6
152-122135580A-1
153-922045537-8
154-122218885-2
155-122045522-6
156-922245510-3
157-122145532-3
158-122215586-1
159-122247715-1
160-122215586-7
161-922125527-8
162-122148980-4
163-122115586S-1
164-122025540-9
165-922115535-4
166-12935550-3
167-92815528-8
168-122115577-3
169-92625512-47
170-121935524R-4
171-92935505-10
172-122135586-10
173-922125583-4
174-122025520-13
175-922125523-1
176-922125536-3
177-122125520-1
178-922125520-2
179-122145502-1
180-92625512-41
181-922045524-4
182-122245523-7
183-122215571-6
184-12945582-1
185-122215571-3
186-122025529R-1
187-92625512-42
188-122148851-1
189-122245571-7
190-122045522-2
191-12915588-10
192-122035570-3
193-922128082-3
194-122035557-3
195-922015526-6
196-122025599-3
197-12935550-1
198-122115586-6
199-122025540-5
200-122125575-1
201-121935524R-1
202-122145532-4
203-12945587-8
204-922115572-1
205-122025541R-3
206-122128871-4
207-922128082-1
208-122115577-1
209-112025540-9
210-122125586-3
211-922015523-2
212-122025557-2
213-922125503-4
214-122025565-3
215-12915501-9
216-12935588-1
217-122135568-4
218-92938806-3
219-122035589-3
220-122245586-3
221-122115503S-1
222-122115579-1
223-122115536S-2
224-922015523-4
225-122025540-4
226-122245586-2
227-122025599-2
228-12835565-3
229-122115583-1
230-12946606-1
231-122135580A-2
232-122115501-5
233-122015575-1
234-122245571-3
235-12845501-4
236-922125536-4
237-122145525-4
238-122015579-1
239-122218885-3
240-12935567-5
241-122215555-9
242-122215586-3
243-122045501-3
244-12947786-3
245-922225571-3
246-122245586-1
247-122045578-3
248-122255599S-1
249-122015558-3
250-12935550-1
251-122015523-2
252-922145575-4
253-122215566-3
254-122048808-3
255-122225587-1
256-122145523-8
257-122245523-9
258-922025521-2
259-122225520-3
260-122115586S-1
261-122215587S-2
262-122025516-1
263-122235521-3
264-122215586-7
265-122145571-8
266-122025515-1
267-122145587-4
268-122015591-1
269-122125585-5
270-122245523-4
271-122145571-6
272-122215571-3
273-122125586-1
274-922225535-5
275-122015523-1
276-122145502-1
277-122115577-2
278-922125520-1
279-122235566-1
280-122045580-1
281-92835511-2
282-92825500-2
283-922145521-3
284-122025520-13
285-12937788-1
286-922235537-1
287-122215520-5
288-922125523-3
289-922125520-2
290-122218885-4
291-922145501-3
292-122045587-8
293-122135516-2
294-922025522-2
295-122027718-8
296-122225586S-2
297-12915588-3
298-122015571-1
299-121935524R-1
300-122125570-3
301-122035555-1
302-122225539R-2
303-922235529-1
304-122235566-2
305-122215561R-2
306-122225541-6
307-922225521-5
308-122255599S-8
309-122135555-2
310-122235583-6
311-122245571-5
312-122015570-4
313-122225570-1
314-922225521-3
315-12928809-7
316-122015518-1
317-122145556S-6
318-122235560A-2
319-122038859-1
320-12925588-2
321-122015501-3
322-122115503S-1
323-922115571-3
324-122245523-7
325-12915501-10
326-922125526-3
327-122145525-2
328-122245523-4
329-122215571-5
330-122148980-7
331-922125527-6
332-122215555-2
333-922225535-4
334-122025565-1
335-122235560A-2
336-122225540-5
337-122025520-11
338-122025540-5
339-922145575-6
340-122015501-2
341-122035565-3
342-122245586-7
343-12835565-3
344-122028882-4
345-922125523-1
346-122225541-8
347-122128871-4
348-122245586-3
349-922128082-3
350-92625512-41
351-92915526-2
352-122038859-1
353-122215556-1
354-122215518-3
355-122015591-1
356-922145501-3
357-922125536-1
358-122135580A-2
359-122125575-1
360-92835511-2
361-122235560A-1
362-122235566-2
363-122245571-5
364-122125585-6
365-922045524-1
366-122148851-1
367-122025530-4
368-922235573-2
369-122135586-4
370-922125536-5
371-12535579S-15
372-92825500-2
373-12925588-7
374-922128082-1
375-122145532-2
376-122215571-6
377-12915501-9
378-12925599-2
379-12935588-3
380-122225586-1
381-122025587-5
382-922235520-3
383-122135585-1
384-122225535-2
385-92625512-9
386-122225587-2
387-12946606-2
388-122245575-1
389-122245571-3
390-122025590-4
391-12945523L-3
392-92625512-42
393-122215580A-1
394-122025587-2
395-122255599S-8
396-92935505-10
397-92625512-47
398-122025529R-1
399-92945516-1
400-92625512-23
401-12928888-5
402-122015579-1
403-122135586-3
404-122145589S-6
405-122215561R-2
406-122225570-3
407-122245575-4
408-122135516-1
409-122245571-7
410-122225586S-1
411-122245523-12
412-12935588-1
413-122025520-14
414-122025540-9
415-122218885-3
416-122025540-6
417-122035501-5
418-122035557-5
419-122215586-11
420-122125572-1
421-922025522-2
422-922145528-3
423-122045587-7
424-92915519-3
425-922145573-9
426-12915501-9
427-12935551-1
428-922125536-1
429-12925584-1
430-922015523-4
431-922125536-4
432-922115584-3
433-122035589-3
434-922045548-2
435-92918850-3
436-122125518-1
437-122225570-1
438-922235529-1
439-122115586-6
440-922145501-3
441-122025540R-1
442-122235571-1
443-122145525-4
444-922125536-3
445-12945501-1
446-122135568-4
447-122255599S-2
448-122245523-9
449-122215587S-2
450-12935542-4
451-122028882-1
452-122025587-1
453-92915526-2
454-12935551-2
455-12915588-10
456-12945582-1
457-122125585-6
458-92835525-1
459-122225541-6
460-122035571-2
461-12935567-5
462-122035501-5
463-922145575-4
464-122215566-4
465-122245573-4
466-122015555-5
467-92935505-10
468-12535579S-15
469-122225582-1
470-122245523-1
471-122125520-1
472-12935588-1
473-122025530-4
474-122115582-3
475-122025516-4
476-12937788-3
477-122215580R-1
478-92915586-3
479-122225587-1
480-122045520-2
481-122025570-1
482-122027718-8
483-122125585S-1
484-12945563-2
485-12945587-3
486-92715521-8
487-122235556-4
488-122135555-5
489-122115503S-2
490-122045580-1
491-12925501-3
492-122035589-2
493-122245573-3
494-121935524R-3
495-92825500-2
496-922115585-1
497-122035557-5
498-122225571-5
499-12925599-2
500-122148851-1
501-122125585-7
502-922145573-4
503-122125543-1
504-92948850A-8
505-122115577-1
506-922225521-5
507-122125583S-1
508-92915586-1
509-922115585-5
510-122045587-1
511-922135518-3
512-122035560-1
513-122245571-5
514-922045537-3
515-122115586-1
516-122045522-2
517-122115570-6
518-122145532-4
519-12948999-1
520-122235560A-1
521-122145571-9
522-122025587-2
523-12945501-1
524-922235573-2
525-122225586S-1
526-122245523-7
527-12948999-1
528-92935505-10
529-12925541-1
530-122135586-3
531-122245586-7
532-12935588-1
533-122135586-4
534-122148851-3
535-122245571-3
536-122025540R-1
537-12925588-2
538-922225521-3
539-12925584-1
540-922145521-4
541-122025516-4
542-122225586-1
543-122015555-5
544-122225570-3
545-122048808-6
546-92945516-1
547-12915501-5
548-122025530-4
549-122215566-4
550-122125520-8
551-922235588-3
552-12935551-2
553-922145528-3
554-122025540-6
555-922135518-3
556-122015523-6
557-122115582-3
558-122115586-2
559-92948864-4
560-122025587-4
561-122126633A-1
562-12935588-5
563-122145502-4
564-122215589S-1
565-12945582-1
566-122225582-4
567-922025504-1
568-122045520-2
569-92915519-2
570-92815522-8
571-122235556-4
572-92835525-4
573-92745506-2
574-12925599-3
575-12928809-4
576-12925542-9
577-92715521-8
578-122015501-1
579-12946606-2
580-122215518-1
581-122245571-7
582-92925508-2
583-122125520-2
584-122045501-1
585-922035583-1
586-12925589-1
587-122115579-1
588-122035555-2
589-922025534R-3
590-12925541-14
591-922217704-1
592-122145519-3
593-12945587-6
594-122125520-9
595-122145587-8
596-122015501-5
597-122135585-3
598-12925589-3
599-122045522-5
600-92945533-2
601-122245523-12
602-122035518-4
603-922025567-1
604-92935519-2
605-122035572S-2
606-122135586-11
607-12915501-2
608-122235583-2
609-122026606-1
610-922125526-4
611-12945555-2
612-122135568-4
613-92845508-9
614-12945501-6
615-122215501-4
616-122215586-11
617-922115535-1
618-122245586-3
619-12925584-3
620-122115586-7
621-122245530-1
622-122125502-3
623-122015508R-3
624-922217704-1
625-92845508-8
626-92625512-35
627-122218883-2
628-922245538-7
629-122145562S-6
630-122145587-6
631-922235573-3
632-122135568-4
633-122017758L-6
634-122125585-9
635-122125598-1
636-122215586-10
637-122025529R-10
638-122225580A-3
639-122045522-5
640-92845508-4
641-122145587-1
642-12945587-7
643-92935505-1
644-92835527-2
645-122045587-9
646-12645591S-1
647-122225535-3
648-122145525-3
649-122215586-11
650-12915580-1
651-922125520-4
652-922115584-3
653-122135586-9
654-12925588-5
655-92945506-4
656-92845508-1
657-122235550A-1
658-122245575-3
659-122225540-2
660-12915501-8
661-12918881-5
662-122025540-3
663-922115574-1
664-12925541-5
665-122035547-1
666-92925508-3
667-122045587-5
668-922015505-2
669-12925553-8
670-122025515-2
671-122015501-5
672-122235582-10
673-122235560A-3
674-122145587-8
675-922248857-4
676-122048808-3
677-92845508-9
678-122025515-1
679-12915501-2
680-122235550A-2
681-92948864-3
682-12915580-2
683-122145587-7
684-92845500-5
685-92945533-2
686-122025540-10
687-122235582-9
688-12925541-14
689-122135586-11
690-122215520-6
691-122215566-1
692-922145573-4
693-122218885-1
694-122215538R-3
695-122025540-11
696-922235540-2
697-122045587-8
698-122025516-1
699-122025530-5
700-92845508-2
701-92625512-3
702-122245530-4
703-122045587-1
704-922045533-2
705-12935551-2
706-122125540-6
707-922035533-1
708-922115571-4
709-122235583-3
710-122215550R-4
711-12915580-4
712-122135585-3
713-92915526-5
714-122215590R-2
715-922145573-8
716-122135562-2
717-92835509-10
718-122235562-2
719-122025540-7
720-122225540-1
721-12935501-3
722-122135585-3
723-122025516-3
724-92945510-3
725-922245538-7
726-922125520-4
727-122015518-5
728-122245571-7
729-922135505-2
730-122145587-6
731-122015570-2
732-12925588-7
733-122017758L-6
734-122235582-10
735-92835509-2
736-122225562-1
737-122245586-3
738-922015505-2
739-12935588-8
740-922045537-1
741-122045587-9
742-122225535-3
743-922115574-1
744-922018802-3
745-12925541-6
746-92935505-2
747-122125585-9
748-12925542-4
749-12925501-1
750-122015518-3



buy_num = Decimal(100)
postage = Decimal(50)
col_name = ['序号', '货号', '尺码', '数量', '得物5.0', '得物3.0', '运费', '合计', '日期']
row_data = [None, None, None, str(buy_num), None, None, str(postage), None, '9.22-10.2']

f = open('/Users/guanji/Desktop/test.txt')
total_row = 0
page_row_count = 0
page_count = 0
pre_line_sku = None
wb = Workbook()
ws = wb.active

for line in f.readlines():
    if total_row % 36 == 0:
        page_count += 1
        print(f'page_count:{page_count}')
        ws.merge_cells(f'A{total_row + 1}:I{total_row + 3}')
        ws.cell(row=total_row + 1, column=1, value='VASS账目明细表').font = Font(name=u'宋体', size=26)
        ws.cell(row=total_row + 1, column=1).alignment = Alignment(horizontal='center', vertical='center')
        total_row += 3
        col = 0
        for name in col_name:
            col += 1
            ws.cell(row=total_row + 1, column=col, value=name).font = Font(name=u'宋体', size=11)
            ws.cell(row=total_row + 1, column=col).alignment = Alignment(horizontal='center', vertical='center')
        total_row += 1
        page_row_count = 0  # 每页第一行重置为 None

    # 解析一行信息
    tmp = line.split(',')
    sku_count = int(tmp[0].strip())  # 第几个货号
    row_data[0] = page_row_count + 1
    row_data[1] = tmp[1].strip()  # 货号
    row_data[2] = tmp[2].strip()  # 尺码
    row_data[4] = tmp[3].strip()  # 买价
    row_data[5] = tmp[4].strip().strip('\n')  # 卖价
    row_data[7] = str(buy_num * Decimal(row_data[4]) - postage)  # 数量*买价-运费
    # print('row_data', row_data)
    col = 0
    for value in row_data:
        col += 1
        # print(col, value, pre_line_sku, page_row_count)
        if col == 2 and value == pre_line_sku and page_row_count != 0:  # 特殊情况货号为空
            continue
        ws.cell(row=total_row + 1, column=col, value=value).font = Font(name=u'宋体', size=11)
        ws.cell(row=total_row + 1, column=col).alignment = Alignment(horizontal='center', vertical='center')

    total_row += 1
    page_row_count += 1
    pre_line_sku = row_data[1]

    if page_row_count % 30 == 0:  # 合计
        ws.cell(row=total_row + 1, column=1, value='总合计').font = Font(name=u'宋体', size=11)
        ws.cell(row=total_row + 1, column=1).alignment = Alignment(horizontal='center', vertical='center')
        ws.cell(row=total_row + 1, column=9, value=row_data[8]).font = Font(name=u'宋体', size=11)
        ws.cell(row=total_row + 1, column=9).alignment = Alignment(horizontal='center', vertical='center')
        for col in range(4, 9):
            total_value = Decimal(0)
            for values in ws.iter_cols(min_row=total_row-29, max_row=total_row, min_col=col, max_col=col, values_only=True):
                # print('values', values)
                for value in values:
                    total_value += Decimal(value)
            ws.cell(row=total_row + 1, column=col, value=str(total_value)).font = Font(name=u'宋体', size=11)
            ws.cell(row=total_row + 1, column=col).alignment = Alignment(horizontal='center', vertical='center')
        total_row += 1
        ws.merge_cells(f'A{total_row + 1}:I{total_row + 1}')
        ws.cell(row=total_row + 1, column=1, value='林明阳').font = Font(name=u'宋体', size=11)
        ws.cell(row=total_row + 1, column=1).alignment = Alignment(horizontal='right', vertical='center')
        total_row += 1

wb.save("/Users/guanji/Desktop/test.xlsx")
